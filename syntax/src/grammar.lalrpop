use crate::utils::{s, bop, unop};
use crate::ast::*;

grammar;

match {
    // keywords get first priority
    r"(?i)and" => AND,
    r"(?i)begin" => BEGIN,
    r"(?i)by" => BY,
    r"(?i)do" => DO,
    r"(?i)else" => ELSE,
    r"(?i)end_for" => END_FOR,
    r"(?i)end_function_block" => END_FUNCTION_BLOCK,
    r"(?i)end_function" => END_FUNCTION,
    r"(?i)end_if" => END_IF,
    r"(?i)end_program" => END_PROGRAM,
    r"(?i)end_repeat" => END_REPEAT,
    r"(?i)end_var" => END_VAR,
    r"(?i)end_while" => END_WHILE,
    r"(?i)exit" => EXIT,
    r"(?i)false" => FALSE,
    r"(?i)for" => FOR,
    r"(?i)function_block" => FUNCTION_BLOCK,
    r"(?i)function" => FUNCTION,
    r"(?i)if" => IF,
    r"(?i)not" => NOT,
    r"(?i)or" => OR,
    r"(?i)program" => PROGRAM,
    r"(?i)repeat" => REPEAT,
    r"(?i)return" => RETURN,
    r"(?i)then" => THEN,
    r"(?i)to" => TO,
    r"(?i)true" => TRUE,
    r"(?i)until" => UNTIL,
    r"(?i)var_input_output" => VAR_INPUT_OUTPUT,
    r"(?i)var_input" => VAR_INPUT,
    r"(?i)var_output" => VAR_OUTPUT,
    r"(?i)var" => VAR,
    r"(?i)while" => WHILE,
    r"(?i)xor" => XOR,
} else {
    r"-?\d+" => INTEGER,
} else {
    r"[\w_][\w_\d]*" => IDENT,
    _,
}

pub File: File = {
    <l:@L> <items:Item*> <r:@R> => File { items, span: s(l, r) },
};

Item: Item = {
    <Program> => <>.into(),
    <Function> => <>.into(),
    <FunctionBlock> => <>.into(),
};

Function: Function = {
    <l:@L> FUNCTION <name:Ident> ":" <return_value:Ident> BEGIN
     <var_blocks:VarBlock*>
     <body:Statements> 
     END_FUNCTION <r:@R> => 
    Function {
        name,
        var_blocks,
        return_value,
        body,
        span: s(l, r),
    },
};

FunctionBlock: FunctionBlock = {
    <l:@L> FUNCTION_BLOCK <name:Ident>
     <var_blocks:VarBlock*>
     BEGIN
     <body:Statements> 
     END_FUNCTION_BLOCK <r:@R> => FunctionBlock {
        name,
        var_blocks,
        body,
        span: s(l, r),
    },
};

pub Statements: Vec<Statement> = {
    <stmts:statement_with_semicolon*> => stmts,
};

statement_with_semicolon: Statement = {
    <Stmt> ";" => <>,
};

pub Stmt: Statement = {
    <Assignment> => <>.into(),
    <FunctionCall> => <>.into(),
    <IterationStatement> => <>,
    <If> => <>.into(),
    <l:@L> EXIT <r:@R> => Statement::Exit(Exit { span: s(l, r) }),
    <l:@L> RETURN <r:@R> => Statement::Return(Return { span: s(l, r) }),
};

pub If: IfStatement = {
    <l:@L> IF <condition:Expr> THEN <body:Statements> END_IF <r:@R> => IfStatement { condition, body, span: s(l, r) },
};

pub Ident: Identifier = {
    <l:@L> <id:IDENT> <r:@R> => Identifier { value: id.to_string(), span: s(l, r) },
};

pub Decl: Declaration = {
    <l:@L> <id:Ident> ":" <ty:Ident> <r:@R> => Declaration::new(id, ty, s(l, r)),
};

pub Lit: Literal = {
    <l:@L> <kind:LiteralKind> <r:@R> => Literal::new(kind, s(l, r)),
};

LiteralKind: LiteralKind = {
    INTEGER => LiteralKind::Integer(<>.parse().unwrap()),
    TRUE => LiteralKind::Boolean(true),
    FALSE => LiteralKind::Boolean(false),
};

pub Assignment: Assignment = {
    <l:@L> <id:DottedIdentifier> ":=" <value:Expr> <r:@R> => Assignment { variable: id, value, span: s(l, r) },
};

pub Expr: Expression = {
    <l:@L> <left:XorExpr> OR <right:XorExpr> <r:@R> => bop(left, right, BinOp::Or, s(l, r)),
    <XorExpr> => <>,
};

XorExpr: Expression = {
    <l:@L> <left:AndExpr> XOR <right:AndExpr> <r:@R> => bop(left, right, BinOp::Xor, s(l, r)),
    <AndExpr> => <>,
};

AndExpr: Expression = {
    <l:@L> <left:Comparison> AND <right:Comparison> <r:@R> => bop(left, right, BinOp::And, s(l, r)),
    <Comparison> => <>,
};

Comparison: Expression = {
    <l:@L> <left:EquExpression> "=" <right:EquExpression> <r:@R> => bop(left, right, BinOp::Equals, s(l, r)),
    <l:@L> <left:EquExpression> "<>" <right:EquExpression> <r:@R> => bop(left, right, BinOp::NotEquals, s(l, r)),
    <EquExpression> => <>,
};

EquExpression: Expression = {
    <l:@L> <left:AddExpression> "<" <right:AddExpression> <r:@R> => bop(left, right, BinOp::LessThan, s(l, r)),
    <l:@L> <left:AddExpression> "<=" <right:AddExpression> <r:@R> => bop(left, right, BinOp::LessThanOrEqual, s(l, r)),
    <l:@L> <left:AddExpression> ">" <right:AddExpression> <r:@R> => bop(left, right, BinOp::GreaterThan, s(l, r)),
    <l:@L> <left:AddExpression> ">=" <right:AddExpression> <r:@R> => bop(left, right, BinOp::GreaterThanOrEqual, s(l, r)),
    <AddExpression> => <>,
};

AddExpression: Expression = {
    <l:@L> <left:Term> "+" <right:Term> <r:@R> => bop(left, right, BinOp::Add, s(l, r)),
    <l:@L> <left:Term> "-" <right:Term> <r:@R> => bop(left, right, BinOp::Subtract, s(l, r)),
    <Term> => <>,
};

Term: Expression = {
    <l:@L> <left:PowerExpression> "*" <right:PowerExpression> <r:@R> => bop(left, right, BinOp::Multiply, s(l, r)),
    <l:@L> <left:PowerExpression> "/" <right:PowerExpression> <r:@R> => bop(left, right, BinOp::Divide, s(l, r)),
    <l:@L> <left:PowerExpression> "%" <right:PowerExpression> <r:@R> => bop(left, right, BinOp::Modulo, s(l, r)),
    <PowerExpression> => <>,
};

PowerExpression: Expression = {
    <l:@L> <left:UnaryExpression> "**" <right:UnaryExpression> <r:@R> => bop(left, right, BinOp::Exponent, s(l, r)),
    <UnaryExpression> => <>,
};

UnaryExpression: Expression = {
    <l:@L> "-" <expr:PrimaryExpression> <r:@R> => unop(expr, UnaryOp::Negate, s(l, r)),
    <l:@L> NOT <expr:PrimaryExpression> <r:@R> => unop(expr, UnaryOp::Not, s(l, r)),
    <PrimaryExpression> => <>,
};

PrimaryExpression: Expression = {
    "(" <Expr> ")" => <>,
    <Lit> => Expression::Literal(<>),
    <DottedIdentifier> => Expression::Variable(<>.into()),
    <FunctionCall> => Expression::FunctionCall(<>),
};

DottedIdentifier: DottedIdentifier = {
    <l:@L> <first:Ident> <tail:("." <Ident>)*> <r:@R> => DottedIdentifier {
        pieces: ::std::iter::once(first).chain(tail).collect(),
        span: s(l, r),
    },
};

FunctionCall: FunctionCall = {
    <l:@L> <name:Ident> "(" <args:Comma<FuncArg>> ")" <r:@R> => FunctionCall {
        name, args, span: s(l, r),
    },
};

FuncArg: FunctionArg = {
    <Assignment> => FunctionArg::Named(<>),
    <Expr> => FunctionArg::Bare(<>),
};

pub IterationStatement: Statement = {
    <ForLoop> => <>,
    <WhileLoop> => <>,
    <RepeatLoop> => <>,
};

ForLoop: Statement = {
    <l:@L> FOR <var:Ident> ":=" <start:Expr> TO <end:Expr> 
    <step:(BY <Expr>)?> DO <body:Statements> END_FOR <r:@R> => Statement::ForLoop(ForLoop {
        variable: var,
        start,
        end,
        step,
        body,
        span: s(l, r)
    }),
}

WhileLoop: Statement = {
    <l:@L> WHILE <condition:Expr> DO <body:Statements> END_WHILE <r:@R> => Statement::WhileLoop(WhileLoop {
        condition,
        body,
        span: s(l, r),
    }),
}

RepeatLoop: Statement = {
    <l:@L> REPEAT <body:Statements> UNTIL <condition:Expr> ";"? END_REPEAT <r:@R> => Statement::RepeatLoop(RepeatLoop {
        condition,
        body,
        span: s(l, r),
    }),
}

pub Block: VarBlock = {
    <VarBlock>,
};

VarBlock: VarBlock = {
 <l:@L> VAR <decls:(<Decl> ";")*> END_VAR <r:@R> => VarBlock { kind: VarBlockKind::Local, declarations: decls, span: s(l, r) },
 <l:@L> VAR_INPUT <decls:(<Decl> ";")*> END_VAR <r:@R> => VarBlock { kind: VarBlockKind::Input, declarations: decls, span: s(l, r) },
 <l:@L> VAR_OUTPUT <decls:(<Decl> ";")*> END_VAR <r:@R> => VarBlock { kind: VarBlockKind::Output, declarations: decls, span: s(l, r) },
 <l:@L> VAR_INPUT_OUTPUT <decls:(<Decl> ";")*> END_VAR <r:@R> => VarBlock { kind: VarBlockKind::InputOutput, declarations: decls, span: s(l, r) },
};

pub Program: Program = {
    <l:@L> PROGRAM <name:Ident> <var_blocks:Block*> <body:Statements> END_PROGRAM <r:@R> =>
        Program { name, var_blocks, body, span: s(l, r) }
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};